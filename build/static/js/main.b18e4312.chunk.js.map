{"version":3,"sources":["components/BadUrl.tsx","components/galleri/FormHamster.tsx","components/galleri/Galleri.tsx","components/startsida/Startsida.tsx","components/Tävla/Tävla.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["BadUrl","to","FormHamster","useState","showForm","setShowForm","hamsterName","age","hamsterFood","hamsterLove","hamsterImg","name","favFood","loves","imgName","wins","defeats","games","newHamster","setNewHamster","NameIsValid","length","IsValidName","ageIsValid","isNaN","ageString","String","includes","isValidAge","FoodIsValid","IsValidFood","LoveIsValid","IsValidLove","ImgIsValid","IsValidImg","formIsValid","a","fetch","method","headers","body","JSON","stringify","res","json","data","console","log","handleChange","event","target","value","onSubmit","preventDefault","saveForm","window","location","reload","className","onClick","onChange","type","placeholder","required","Number","saveData","response","Galleri","hamsterData","setHamsterData","show","setShow","useEffect","sendRequest","ReadMore","index","filter","hamster","id","deleteMethod","DeleteOne","map","src","alt","Startsida","leader","setLeader","lead","Tävla","saveRandomOne","setSaveRandomOne","saveRandomTwo","setSaveRandomTwo","setValue","visible","setVisible","Vote","voting","sendRequestOne","sendRequestTwo","saveD","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b18e4312.chunk.js","sourcesContent":["import { Link } from 'react-router-dom'\r\n\r\nconst BadUrl = () => (\r\n\t<div>\r\n\t\tDen här sidan finns inte! Prova att gå <Link to=\"/\">tillbaka till startsidan</Link>.\r\n\t</div>\r\n)\r\n\r\nexport default BadUrl","import { useState } from \"react\"\r\nimport './Galleri.css'\r\n\r\nconst FormHamster = () =>{\r\n\r\n  const [ showForm, setShowForm ] = useState<boolean>(false)\r\n    const [hamsterName, setHamsterName] = useState('')\r\n    const [age, setAge] = useState(0)\r\n    const [hamsterFood, setHamsterFood] = useState('')\r\n    const [hamsterLove, setHamsterLove] = useState('')\r\n    const [hamsterImg, setHamsterImg] = useState('')\r\n\r\n    const [newHamster, setNewHamster] = useState({\r\n        name: hamsterName,\r\n        age: age,\r\n        favFood: hamsterFood,\r\n        loves: hamsterLove,\r\n        imgName: hamsterImg,\r\n        wins: 0,\r\n        defeats: 0,\r\n        games: 0\r\n    }\r\n    )\r\n    \r\n    const NameIsValid = IsValidName(hamsterName)\r\n    const ageIsValid = isValidAge(age)\r\n    const FoodIsValid = IsValidFood(hamsterFood)\r\n    const LoveIsValid = IsValidLove(hamsterLove)\r\n    const ImgIsValid = IsValidImg(hamsterImg)\r\n\r\n    const formIsValid = NameIsValid && ageIsValid && FoodIsValid && LoveIsValid && ImgIsValid\r\n\r\n    function IsValidName(hamsterName: string): boolean{\r\n        return hamsterName.length >= 3\r\n    }\r\n\r\n    function isValidAge(age: number): boolean {\r\n        if( isNaN(age) ) return false\r\n        if( age < 0 ) return false\r\n        let ageString = String(age)\r\n        if( ageString.includes(',') || ageString.includes('.') ) return false\r\n        return true\r\n    }\r\n\r\n    function IsValidFood(hamsterFood: string): boolean{\r\n        return hamsterFood.length >= 3\r\n    }\r\n\r\n    function IsValidLove(hamsterLove: string): boolean{\r\n        return hamsterLove.length >= 3\r\n    }\r\n\r\n    function IsValidImg(hamsterImg: string): boolean{\r\n        return hamsterImg.includes('-') || hamsterImg.includes('.') || hamsterImg.length >= 3\r\n        \r\n    }\r\n\r\n\r\n    \r\n    async function saveForm () {\r\n        const res = await fetch('/hamsters', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8',\r\n            },\r\n            body: JSON.stringify(newHamster)\r\n        })\r\n        let data = await res.json()\r\n        setNewHamster(data)\r\n        console.log(newHamster)\r\n        \r\n    }\r\n\r\n    const SaveInput = (event: any) =>{\r\n        if(!formIsValid){\r\n            console.log('form is not valid') //lägger ej till ny hamster, men refreshar sidan, hur ändra?\r\n            return\r\n        } \r\n        else{\r\n            console.log(formIsValid)\r\n            event.preventDefault()\r\n            saveForm()\r\n            window.location.reload()\r\n        }\r\n        \r\n    }\r\n\r\n    const handleChange = (event: any) =>{\r\n        setNewHamster({...newHamster, [event.target.name]: event.target.value})  \r\n    }  \r\n\r\n    return(\r\n        <>\r\n        {showForm ? <form onSubmit={SaveInput} className={'form ' + showForm} >\r\n            <article className=\"addHamster\">\r\n                <h2 onClick={() => setShowForm(!showForm)}>-</h2>\r\n                </article>\r\n                <section className='formFields'>\r\n                    <h1 className='headline'>Lägg till en ny hamster</h1>\r\n                    <input onChange={handleChange} name='name' value={newHamster.name} type=\"text\" placeholder='Namn' required />\r\n                    <input onChange={handleChange} name='age' placeholder='Ålder' value={Number(newHamster.age)} type=\"string\" required  />\r\n                    <input onChange={handleChange} name='favFood' value={newHamster.favFood} type=\"text\" placeholder='Favoritmat' required />\r\n                    <input onChange={handleChange} name='loves' value={newHamster.loves} type=\"text\" placeholder='Älskar' required />\r\n                    <input onChange={handleChange} name='imgName' value={newHamster.imgName} type=\"text\" placeholder='Bildnamn (hamster-3.jpg)' required />\r\n                <button  type=\"submit\">Lägg till</button>\r\n                </section>\r\n                \r\n            </form>: <article className=\"addHamster\">\r\n            <h2 onClick={() => setShowForm(!showForm)}>+</h2>\r\n        </article>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FormHamster","import { useEffect, useState } from 'react'\r\nimport { HamsterInfo } from '../../models/HamsterInfo'\r\nimport FormHamster from './FormHamster'\r\nimport './Galleri.css'\r\n\r\nconst Galleri = () =>{\r\n\r\n    const [ hamsterData, setHamsterData ] = useState<HamsterInfo[] | null>(null)\r\n    const [ show, setShow ] = useState<boolean>(true)\r\n\r\n\r\n    useEffect(() =>{\r\n        sendRequest(setHamsterData)\r\n    }, [])\r\n\r\n    const ReadMore = (index: string) =>{\r\n        if (hamsterData){\r\n            let hamster = hamsterData.filter(hamster => hamster.id.includes(index))\r\n            setShow(!show)\r\n        }\r\n    }\r\n\r\n    const deleteMethod = {\r\n        method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=UTF-8',\r\n                'Accept': 'application/json;charset=UTF-8',\r\n            },\r\n    }\r\n\r\n    async function DeleteOne (id: string) {\r\n        await fetch(`/hamsters/${id}`, deleteMethod)\r\n        window.location.reload();\r\n    }\r\n\r\n\r\n    return(\r\n        <>\r\n        < FormHamster />\r\n        <ul className=\"grid\">\r\n        {hamsterData ? hamsterData.map((hamster, index) =>(   \r\n        <li className=\"infoCard\" key={index}>\r\n            <figure>\r\n                <img className=\"infoCardImg\" src={`../img/${hamster.imgName}`} alt=\"hamster profile\" />\r\n                <img src=\"../\" alt=\"\" />\r\n            </figure>\r\n            {show ?  \r\n            <section className=\"container\">\r\n            <p >Namn: {hamster.name}</p>\r\n            <section className=\"buttons\">\r\n                    <button onClick={() => DeleteOne(hamster.id)} className='trashcan'></button>\r\n                   <button onClick={() => ReadMore(hamster.id)}>läs mer</button>\r\n                </section>\r\n        </section> \r\n            : <section className=\"container\">\r\n                <p >Namn: {hamster.name}</p>\r\n                <p >Ålder: {hamster.age}</p>\r\n                <p >Favoritmat: {hamster.favFood}</p>\r\n                <p >Älskar: {hamster.loves}</p>\r\n                <p >Spel: {hamster.games}</p>\r\n                <p >Vinster: {hamster.wins}</p>\r\n                <p >Förluster: {hamster.defeats}</p>\r\n                <section className=\"buttons\">\r\n                        <button onClick={() => DeleteOne(hamster.id)} className='trashcan'></button>\r\n                       <button onClick={() => ReadMore(hamster.id)}>läs mindre</button>\r\n                    </section>\r\n            </section> \r\n            }        \r\n        </li>\r\n        ))\r\n        :\r\n        'Loading data'\r\n        } \r\n    </ul>\r\n     \r\n    </>\r\n    )\r\n}\r\n\r\nasync function sendRequest(saveData: any){\r\n    const response = await fetch ('/hamsters')\r\n    const data = await response.json()\r\n    saveData(data)\r\n}\r\n\r\nexport default Galleri","import { useEffect, useState } from \"react\"\r\nimport { HamsterInfo } from \"../../models/HamsterInfo\"\r\nimport './startsida.css'\r\n\r\nconst Startsida = () =>{\r\n\r\n    const [ leader, setLeader ] = useState<HamsterInfo[] | null>(null)\r\n\r\n    useEffect(() =>{\r\n        sendRequest(setLeader)\r\n    }, [])\r\n\r\n    return(\r\n        <section className='landingSection'>\r\n            <article className='textSection'>\r\n            <h1>Välkommen till Hamster Wars</h1>\r\n            \r\n                <p>Det här är ett spel för unga som gamla, djurälskare men framförallt hamsterälskare. </p> \r\n                <br/>\r\n                <p>Hur spelet går till?</p>\r\n                <p>Just nu befinner du dig på startsidan. I övre högra hörnet har du din meny. \r\n                I nästa flik som vi kallar \"Tävla\" kommer två hamstrar att slumpas fram. Det är då upp till dig att rösta vilken hamster som är sötast. När du har rösat sparas status i vårt system och den/de hamster/hamstrar med högst betyg presenteras här på startsidan. </p>\r\n                <br/>\r\n                <p>Du har även möjlighet att ta bort och lägga till dina egna hamstrar i tävlingen. </p>\r\n            </article>\r\n            <aside>\r\n                <p>1:a platsen just nu: </p>\r\n            \r\n                <ul>\r\n                    {leader ? leader.map((lead, index) =>(\r\n                        <li key={index}>{lead.name} med {lead.wins} vinster</li>\r\n                    )): null}\r\n                </ul>\r\n            </aside>\r\n        </section>\r\n        \r\n    )\r\n}\r\n\r\nasync function sendRequest(saveData: any){\r\n    const response = await fetch ('/hamsters/cutest')\r\n    const data = await response.json()\r\n    saveData(data)\r\n}\r\n\r\nexport default Startsida","import './Tävla.css'\r\nimport { MouseEventHandler, useEffect, useState } from \"react\"\r\nimport { HamsterInfo } from \"../../models/HamsterInfo\"\r\n\r\n    const name: any = 'name'\r\n    const imgName: any = 'imgName'\r\n    const id: any = 'id'\r\n    const wins: any = 'wins'\r\n    const defeats: any = 'defeats'\r\n\r\n\r\n\r\n//Visa två slumpade hamstrar. Låt användaren välja den sötaste. Visa resultatet och initiera nästa match.\r\nconst Tävla = () =>{\r\n    const [saveRandomOne, setSaveRandomOne] = useState<HamsterInfo[] | null>(null)\r\n    const [saveRandomTwo, setSaveRandomTwo] = useState<HamsterInfo[] | null>(null)\r\n    const [value, setValue] = useState(0)\r\n    const [visible, setVisible] = useState<boolean>(false)\r\n    \r\n\r\n    useEffect(() =>{\r\n        sendRequestOne(setSaveRandomOne)\r\n    }, []) \r\n\r\n    useEffect(() =>{\r\n        sendRequestTwo(setSaveRandomTwo)\r\n    }, []) \r\n\r\n    // useEffect(() => {\r\n    //     setValue(JSON.parse(window.localStorage.getItem('value')|| '{}')); //sparar value vilket innehåller hamstrarnas vinster, uppdaterar varje\r\n    //   }, []);\r\n    \r\n    //   useEffect(() => {\r\n    //     window.localStorage.setItem('value', value.toString());\r\n    //   }, [value]);\r\n\r\n    //få in så uppdaterar vald hamster\r\n    //få in värde i overlay\r\n    //gör loser funktionen\r\n\r\n    \r\n    async function Vote(event: any){\r\n            if(saveRandomOne){\r\n            \r\n            await setValue(Number(value) + 1)\r\n            const voting = {wins: value}\r\n\r\n            await fetch(`/hamsters/${saveRandomOne[id]}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(voting),\r\n          })\r\n         setVisible(!visible)\r\n         console.log(voting)\r\n        }  \r\n        }\r\n\r\n    const RefreshPage = () =>{\r\n        window.location.reload();\r\n    }\r\n\r\nasync function sendRequestOne(saveData: any){\r\n    const response = await fetch ('/hamsters/random')\r\n    const data = await response.json()\r\n    saveData(data)\r\n    console.log(data)\r\n}\r\n\r\nasync function sendRequestTwo(saveD: any){\r\n    const response = await fetch ('/hamsters/random')\r\n    const data = await response.json()\r\n    saveD(data)\r\n    console.log(data)\r\n}\r\n    return(\r\n        <section className='compete'>\r\n        <section className='hamsterCompete'>\r\n           <ul >\r\n            { saveRandomOne && saveRandomTwo ? \r\n            <>\r\n            <li >\r\n                <img src={`../../img/${saveRandomOne[imgName]}`} alt=\"hamster\" />\r\n                <p>Namn: {saveRandomOne[name]}</p>\r\n                <button id='firstBtn' onClick={Vote}>Rösta på mig</button> {/* om knapp ej klickad på så räkna ut förlust */}\r\n            </li>\r\n            <li >\r\n            <img src={`../../img/${saveRandomTwo[imgName]}`} alt=\"hamster\" />\r\n            <p>Namn: {saveRandomTwo[name]}</p>\r\n            <button id='secondBtn' onClick={Vote}>Rösta på mig</button>\r\n        </li>\r\n        </>\r\n             : null}\r\n            </ul>        \r\n        </section>\r\n        <section className={'overlay ' + visible}>\r\n            \r\n            { saveRandomOne && saveRandomTwo ?\r\n            <ul>\r\n            <li>\r\n                <h1>Vinnare: </h1>\r\n                <img src={`../../img/${saveRandomOne[imgName]}`} alt=\"hamster\" />\r\n                <p>Namn: {saveRandomOne[name]}</p> \r\n                <p>Vinster: {saveRandomOne[wins]}</p>\r\n                <p>Förluster: {saveRandomOne[defeats]}</p>\r\n\r\n            </li>\r\n            <li>\r\n            <h1>Förlorare</h1>\r\n            <img src={`../../img/${saveRandomOne[imgName]}`} alt=\"hamster\" />\r\n            <p>Namn: {saveRandomTwo[name]}</p> \r\n            <p>Vinster: {saveRandomTwo[wins]}</p>\r\n            <p>Förluster: {saveRandomTwo[defeats]}</p>\r\n\r\n        </li>\r\n            <button onClick={() => RefreshPage()}>Starta nytt spel</button>\r\n            </ul>\r\n            : null}\r\n            \r\n        </section> \r\n        </section>\r\n\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Tävla","import { Link, Switch, Route } from 'react-router-dom'\r\nimport './App.css';\r\nimport BadUrl from './components/BadUrl';\r\nimport Galleri from './components/galleri/Galleri';\r\nimport Startsida from './components/startsida/Startsida';\r\nimport Tävla from './components/Tävla/Tävla';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n        <header>\r\n          <h2>Hamster Wars</h2>\r\n          <nav className=\"menuSection\">\r\n            <Link to='/'>Startsida</Link>\r\n            <Link to='/Tävla'>Tävla</Link>\r\n            <Link to='/Galleri'>Galleri</Link>\r\n          </nav>\r\n        </header>\r\n        <main>\r\n          <Switch>\r\n            <Route exact path='/'> < Startsida /> </Route>\r\n            <Route path='/Tävla'> < Tävla /> </Route>\r\n            <Route path='/Galleri'> < Galleri /> </Route>\r\n            <Route path='/'> <BadUrl /></Route>\r\n          </Switch>\r\n        </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    < BrowserRouter>\r\n    <App />\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}